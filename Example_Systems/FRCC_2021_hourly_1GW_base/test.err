[ Info: PACKAGE LOADED
[ Info: Reading Input CSV Files
[ Info: Load_data.csv Successfully Read!
[ Info: Fuels_data.csv Successfully Read!
[ Info: Generators_data.csv Successfully Read!
[ Info: Generators_variability.csv Successfully Read!
[ Info: Energy_share_requirement.csv Successfully Read!
[ Info: CSV Files Successfully Read In From /home/gridsan/dmallapragada/Time_matching/DOLPHYN-dev_hourly/new_scenarios_03_2023/FRCC_2021_hourly_1GW_base/
[ Info: Reading H2 Input CSV Files
[ Info: HSC_generation.csv Successfully Read!
[ Info: HSC_load_data.csv Successfully Read!
[ Info: HSC_generators_variability.csv Successfully Read!
[ Info: HSC Input CSV Files Successfully Read In From /home/gridsan/dmallapragada/Time_matching/DOLPHYN-dev_hourly/new_scenarios_03_2023/FRCC_2021_hourly_1GW_base/
[ Info: Discharge Module
[ Info: Non-served Energy Module
[ Info: Investment Discharge Module
[ Info: Unit Commitment Module
[ Info: Emissions Module for CO2 Policy modularization
[ Info: Dispatchable Resources Module
[ Info: Must-Run Resources Module
[ Info: Storage Resources Module
[ Info: Storage Investment Module
[ Info: Storage Core Resources Module
[ Info: Storage Resources with Symmetric Charge/Discharge Capacity Module
[ Info: Hydro Reservoir Core Resources Module
[ Info: Thermal (Unit Commitment) Resources Module
[ Info: Hydrogen Generation and Storage Discharge Module
[ Info: Hydrogen Investment Discharge Module
[ Info: Hydrogen Production Module
[ Info: H2 Production Core Module
[ Info: H2 Production (No Unit Commitment) Module
┌ Warning: The addition operator has been used on JuMP expressions a large number of times. This warning is safe to ignore but may indicate that model generation is slower than necessary. For performance reasons, you should not add expressions in a loop. Instead of x += y, use add_to_expression!(x,y) to modify x in place. If y is a single variable, you may also use add_to_expression!(x, coef, y) for x += coef*y.
└ @ JuMP ~/.julia/packages/JuMP/UqjgA/src/JuMP.jl:1338
[ Info: H2 Emissions Module for CO2 Policy modularization
[ Info: Hydrogen Non-served Energy Module
[ Info: C02 Policies Module for power and hydrogen system combined
[ Info: C02 Policies Module
[ Info: Energy Share Requirement Policies Module
┌ Warning: Axis contains one element: 1. If intended, you can safely ignore this warning. To explicitly pass the axis with one element, pass `[1]` instead of `1`.
└ @ JuMP.Containers ~/.julia/packages/JuMP/UqjgA/src/Containers/DenseAxisArray.jl:173
[ Info: LP solved for primal
[ Info: Time elapsed for writing costs is 116.048958058
[ Info: Time elapsed for writing storage is 1.152194956
[ Info: Time elapsed for writing nse is 0.712068707
[ Info: Time elapsed for writing power balance is 3.342607482
[ Info: Time elapsed for writing emissions is 1.701789721
[ Info: Time elapsed for writing reliability is 0.540378546
[ Info: Time elapsed for writing storage duals is 0.983252169
[ Info: Time elapsed for writing commitment is 30.111319951
[ Info: Time elapsed for writing startup is 26.78606847
[ Info: Time elapsed for writing shutdown is 27.91321826
[ Info: Time elapsed for writing time weights is 0.160845633
ERROR: LoadError: ArgumentError: adding AbstractArray other than AbstractVector as a column of a data frame is not allowed
Stacktrace:
 [1] _preprocess_column(col::Array{Union{Missing, Float64}, 3}, len::Int64, copycols::Bool)
   @ DataFrames /state/partition1/llgrid/pkg/julia/julia-1.7.3/local/share/julia/packages/DataFrames/a6np0/src/dataframe/dataframe.jl:234
 [2] DataFrames.DataFrame(columns::Vector{Any}, colindex::DataFrames.Index; copycols::Bool)
   @ DataFrames /state/partition1/llgrid/pkg/julia/julia-1.7.3/local/share/julia/packages/DataFrames/a6np0/src/dataframe/dataframe.jl:208
 [3] DataFrames.DataFrame(; kwargs::Base.Pairs{Symbol, Array{Union{Missing, Float64}, 3}, Tuple{Symbol}, NamedTuple{(:ESR_Price,), Tuple{Array{Union{Missing, Float64}, 3}}}})
   @ DataFrames /state/partition1/llgrid/pkg/julia/julia-1.7.3/local/share/julia/packages/DataFrames/a6np0/src/dataframe/dataframe.jl:313
 [4] write_esr_prices(path::String, sep::String, inputs::Dict{Any, Any}, setup::Dict{Any, Any}, EP::JuMP.Model)
   @ DOLPHYN ~/Time_matching/DOLPHYN-dev_hourly/src/GenX/write_outputs/energy_share_requirement/write_esr_prices.jl:24
 [5] write_outputs(EP::JuMP.Model, path::String, setup::Dict{Any, Any}, inputs::Dict{Any, Any})
   @ DOLPHYN ~/Time_matching/DOLPHYN-dev_hourly/src/GenX/write_outputs/write_outputs.jl:135
 [6] top-level scope
   @ ~/Time_matching/DOLPHYN-dev_hourly/new_scenarios_03_2023/FRCC_2021_hourly_1GW_base/Run.jl:93
in expression starting at /home/gridsan/dmallapragada/Time_matching/DOLPHYN-dev_hourly/new_scenarios_03_2023/FRCC_2021_hourly_1GW_base/Run.jl:93
