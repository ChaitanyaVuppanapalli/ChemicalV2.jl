var documenterSearchIndex = {"docs":
[{"location":"h2_production/#h2_production","page":"Production","title":"h2_production","text":"","category":"section"},{"location":"h2_production/","page":"Production","title":"Production","text":"DOLPHYN.h2_production(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_production/#DOLPHYN.h2_production-Tuple{Model, Dict, Dict}","page":"Production","title":"DOLPHYN.h2_production","text":"h2_production(EP::Model, inputs::Dict, setup::Dict)\n\nThe h2_production module creates decision variables, expressions, and constraints related to various hydrogen generation technologies (electrolyzers, natural gas reforming etc.)\n\n\n\n\n\n","category":"method"},{"location":"h2_production_commit/#h2*production*commit","page":"Production Commit","title":"h2productioncommit","text":"","category":"section"},{"location":"h2_production_commit/","page":"Production Commit","title":"Production Commit","text":"DOLPHYN.h2_production_commit(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_long_duration_truck/#h2*long*duration_truck","page":"Long Duration Truck","title":"h2longduration_truck","text":"","category":"section"},{"location":"h2_long_duration_truck/","page":"Long Duration Truck","title":"Long Duration Truck","text":"DOLPHYN.h2_long_duration_truck(EP::Model, inputs::Dict)","category":"page"},{"location":"h2_long_duration_truck/#DOLPHYN.h2_long_duration_truck-Tuple{Model, Dict}","page":"Long Duration Truck","title":"DOLPHYN.h2_long_duration_truck","text":"h2_long_duration_truck(EP::Model, inputs::Dict)\n\nThis function includes LongDurationtruck only when modeling representative periods.\n\n** Variables**\n\nState of charge of truck at beginning of each modeled period n. \\begin{align}     v{j, t}^{\\mathrm{F}}+v{j, t}^{\\mathrm{E}} & = V_{j} \\quad \\forall j \\in \\mathbb{J}, t \\in \\mathbb{T} \\end{align}\n\nbeginaligned\n    v_n^SOC geqslant 0v_zjn^SOCleqslant v_j^TRU\nendaligned\n\nConstraints\n\nState of charge of truck at beginning of each modeled period cannot exceed installed energy capacity\n\nbeginaligned\n    v_zjn^SOC v_j^TRU\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"h2_storage/#h2_storage","page":"Storage","title":"h2_storage","text":"","category":"section"},{"location":"h2_storage/","page":"Storage","title":"Storage","text":"DOLPHYN.h2_storage(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_storage/#DOLPHYN.h2_storage-Tuple{Model, Dict, Dict}","page":"Storage","title":"DOLPHYN.h2_storage","text":"h2_storage(EP::Model, inputs::Dict, setup::Dict)\n\nA wide range of energy storage devices (all o in mathcalO) can be modeled in DOLPHYN, using one of two generic storage formulations: (1) storage technologies with symmetric charge and discharge capacity (all o in mathcalO^sym), such as Lithium-ion batteries and most other electrochemical storage devices that use the same components for both charge and discharge; and (2) storage technologies that employ distinct and potentially asymmetric charge and discharge capacities (all o in mathcalO^asym), such as most thermal storage technologies or hydrogen electrolysis/storage/fuel cell or combustion turbine systems.\n\n\n\n\n\n","category":"method"},{"location":"h2_truck_investment/#h2*truck*investment","page":"Truck Investment","title":"h2truckinvestment","text":"","category":"section"},{"location":"h2_truck_investment/","page":"Truck Investment","title":"Truck Investment","text":"DOLPHYN.h2_truck_investment(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_truck_investment/#DOLPHYN.h2_truck_investment-Tuple{Model, Dict, Dict}","page":"Truck Investment","title":"DOLPHYN.h2_truck_investment","text":"h2_truck_investment(EP::Model, inputs::Dict, setup::Dict)\n\nThis function includes investment variables, expressions and related constraints for H2 trucks.\n\nVariables\n\nTruck capacity built and retired\n\nbeginaligned\n    v_CAPj^TRU geqslant 0\nendaligned\n\nbeginaligned\n    v_RETCAPj^TRU geqslant 0\nendaligned\n\nbeginaligned\n   v_CAPj^TRU geqslant 0\nendaligned\n\nbeginaligned\n    v_NEWCAPj^TRU geqslant 0\nendaligned\n\nConstraints\n\nTruck retirements cannot retire more charge capacity than existing charge capacity\n\nbeginaligned\n    v_RETCAPNUMj^TRU le v_ExistNumj^TRU\nendaligned\n\nTruck compression energyCannot retire more energy capacity than existing energy capacity\n\nbeginaligned\n    v_RETCAPEnergyj^TRU le v_ExistEnergyCapj^TRU \nendaligned\n\nExpressions\n\nbeginaligned\n    C_mathrmTRU^mathrmo= sum_z rightarrow z^prime in mathbbB sum_j in mathbbJ sum_t in mathbbT Omega_t mathrmL_z rightarrow z^prime \n     timesleft(mathrmo_j^mathrmTRU mathrmF y_z rightarrow z ^prime j t^mathrmF+mathrmo_j^mathrmTRU mathrmE y_z rightarrow z^prime j t^mathrmEright)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"policies/#co2*cap*hsc","page":"Policies","title":"co2caphsc","text":"","category":"section"},{"location":"policies/","page":"Policies","title":"Policies","text":"DOLPHYN.co2_cap_hsc(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"policies/#DOLPHYN.co2_cap_hsc-Tuple{Model, Dict, Dict}","page":"Policies","title":"DOLPHYN.co2_cap_hsc","text":"co2_cap_hsc(EP::Model, inputs::Dict, setup::Dict)\n\nThis policy constraints mimics the CO_2 emissions cap and permit trading systems, allowing for emissions trading across each zone for which the cap applies. The constraint p in mathcalP^CO_2 can be flexibly defined for mass-based or rate-based emission limits for one or more model zones, where zones can trade CO_2 emissions permits and earn revenue based on their CO_2 allowance. Note that if the model is fully linear (e.g. no unit commitment or linearized unit commitment), the dual variable of the emissions constraints can be interpreted as the marginal CO_2 price per tonne associated with the emissions target. Alternatively, for integer model formulations, the marginal CO_2 price can be obtained after solving the model with fixed integer/binary variables.\n\nThe CO_2 emissions limit can be defined in one of the following ways: a) a mass-based limit defined in terms of annual CO_2 emissions budget (in million tonnes of CO2), b) a load-side rate-based limit defined in terms of tonnes CO_2 per MWh of demand and c) a generation-side rate-based limit defined in terms of tonnes CO_2 per MWh of generation.\n\nMass-based emissions constraint\n\nMass-based emission limits are implemented in the following expression. For each constraint, p in mathcalP^CO_2_mass, we define a set of zones z in mathcalZ^CO_2_pmass that can trade CO_2 allowance. Input data for each constraint  p in mathcalP^CO_2_mass requires the CO_2 allowance/ budget for each model zone, epsilon^CO_2_zp mass, to be provided in terms of million metric tonnes. For every generator y, the parameter epsilon_yz^CO_2 reflects the specific CO_2 emission intensity in tCO_2/MWh associated with its operation.  The resulting constraint is given as:\n\nbeginaligned\n\tsum_z in mathcalZ^CO_2_pmass sum_y in mathcalG sum_t in mathcalT left(epsilon_yz^CO_2 times omega_t times Theta_yzt right)\n\t leq sum_z in mathcalZ^CO_2_pmass epsilon^CO_2_zp mass hspace1 cm  forall p in mathcalP^CO_2_mass\nendaligned\n\nIn the above constraint, we include both power discharge and charge term for each resource to account for the potential for CO_2 emissions (or removal when considering negative emissions technologies) associated with each step. Note that if a limit is applied to each zone separately, then the set mathcalZ^CO_2_pmass will contain only one zone with no possibility of trading. If a system-wide emission limit constraint is applied, then mathcalZ^CO_2_pmass will be equivalent to a set of all zones.\n\nLoad-side rate-based emissions constraint\n\nWe modify the right hand side of the above mass-based constraint, p in mathcalP^CO_2_load, to set emissions target based on a CO_2 emission rate limit in tCO_2/MWh times the total demand served in each zone. In the following constraint, total demand served takes into account non-served energy and storage related losses. Here, epsilon_zpload^maxCO_2 denotes the emission limit in terms on tCO_2/MWh.\n\nbeginaligned\n\tsum_z in mathcalZ^CO_2_pload sum_y in mathcalG sum_t in mathcalT left(epsilon_yz^CO_2 times omega_t times Theta_ytz right)\n\tleq  sum_z in mathcalZ^CO_2_pload sum_t in mathcalT  left(epsilon_zpload^CO_2 times  omega_t times D_zt right)   +  sum_z in mathcalZ^CO_2_pload sum_y in mathcalO  sum_t in mathcalT left(epsilon_zpload^CO_2 times omega_t times left(Pi_ytz - Theta_ytz right) right)   -  sum_z in mathcalZ^CO_2_pload sum_s in mathcalS  sum_t in mathcalT  left(epsilon_zpload^CO_2 times omega_t times Lambda_sztright) hspace1 cm  forall p in mathcalP^CO_2_load\nendaligned\n\nGenerator-side emissions rate-based constraint\n\nSimilarly, a generation based emission constraint is defined by setting the emission limit based on the total generation times the carbon emission rate limit in tCO_2/MWh of the region. The resulting constraint is given as:\n\nbeginaligned\nsum_z in mathcalZ^CO_2_pgen sum_y in mathcalG sum_t in mathcalT  left(epsilon_yz^CO_2 times omega_t times Theta_ytz right) \n\tleq sum_z in mathcalZ^CO_2_pgen sum_y in mathcalG sum_t in mathcalT  left(epsilon_zpgen^CO_2 times  omega_t times Theta_ytz right)  hspace1 cm  forall p in mathcalP^CO_2_gen\nendaligned\n\nNote that the generator-side rate-based constraint can be used to represent a fee-rebate (``feebate'') system: the dirty generators that emit above the bar (epsilon_zpgen^maxCO_2) have to buy emission allowances from the emission regulator in the region z where they are located; in the same vein, the clean generators get rebates from the emission regulator at an emission allowance price being the dual variable of the emissions rate constraint.\t\n\n\n\n\n\n","category":"method"},{"location":"h2_storage_investment/#h2*storage*investment","page":"Storage Investment","title":"h2storageinvestment","text":"","category":"section"},{"location":"h2_storage_investment/","page":"Storage Investment","title":"Storage Investment","text":"DOLPHYN.h2_storage_investment(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"core/#emission_hsc","page":"Core","title":"emission_hsc","text":"","category":"section"},{"location":"core/","page":"Core","title":"Core","text":"DOLPHYN.emissions_hsc(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"core/#DOLPHYN.emissions_hsc-Tuple{Model, Dict, Dict}","page":"Core","title":"DOLPHYN.emissions_hsc","text":"emissions_hsc(EP::Model, inputs::Dict, setup::Dict)\n\nThis function creates expression to add the CO2 emissions  in each zone, which is subsequently added to the total emissions\n\n\n\n\n\n","category":"method"},{"location":"core/#h2_investment","page":"Core","title":"h2_investment","text":"","category":"section"},{"location":"core/","page":"Core","title":"Core","text":"DOLPHYN.h2_investment(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"core/#DOLPHYN.h2_investment-Tuple{Model, Dict, Dict}","page":"Core","title":"DOLPHYN.h2_investment","text":"h2_discharge(EP::Model, inputs::Dict, UCommit::Int, Reserves::Int)\n\nThis module defines the production decision variable  representing hydrogen injected into the network by resource y by at time period t.\n\nThis module additionally defines contributions to the objective function from variable costs of generation (variable O&M plus fuel cost) from all resources over all time periods.\n\nVariables\n\nbeginaligned\n\tvartheta _k^GenNewCapge 0\t\nendaligned\n\nbeginaligned\n\tvartheta _k^GenRetCapge 0\nendaligned\n\nbeginaligned\n Delta^total_yz =(overlineDelta_yz-Delta_yz) forall y in mathcalG z in mathcalZ\nendaligned\n\nOne cannot retire more capacity than existing capacity.\n\nbeginaligned\nDelta_yz leq overlineDelta_yz\n\thspace4 cm  forall y in mathcalG z in mathcalZ\nendaligned\n\nIn addition, this function adds investment and fixed O\\&M related costs related to discharge/generation capacity to the objective function:\n\nbeginaligned\n \tsum_y in mathcalG  sum_z in mathcalZ\n\tleft( (pi^INVEST_yz times overlineOmega^size_yz times  )\n\t+ (pi^FOM_yz times Delta^total_yz)right)\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"core/#h2*non*served_energy","page":"Core","title":"h2nonserved_energy","text":"","category":"section"},{"location":"core/","page":"Core","title":"Core","text":"DOLPHYN.h2_non_served_energy(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"core/#DOLPHYN.h2_non_served_energy-Tuple{Model, Dict, Dict}","page":"Core","title":"DOLPHYN.h2_non_served_energy","text":"h2_non_served_energy(EP::Model, inputs::Dict, setup::Dict)\n\nThis function defines the non-served energy/curtailed demand decision variable Lambda_stz forall s in mathcalS forall t in mathcalT z in mathcalZ, representing the total amount of demand curtailed in demand segment s at time period t in zone z. The first segment of non-served energy, s=1, is used to denote the cost of involuntary demand curtailment (e.g. emergency load shedding or rolling blackouts), specified as the value of n_1^slope. Additional segments, s geq 2 can be used to specify a segment-wise approximation of a price elastic demand curve, or segments of price-responsive curtailable loads (aka demand response). Each segment denotes a price/cost at which the segment of demand is willing to curtail consumption, n_s^slope, representing the marginal willingness to pay for electricity of this segment of demand (or opportunity cost incurred when demand is not served) and a maximum quantity of demand in this segment, n_s^size, specified as a share of demand in each zone in each time step, D_tz Note that the current implementation assumes demand segments are an equal share of hourly load in all zones.\n\nThis function defines contributions to the objective function from the cost of non-served energy/curtailed demand from all demand curtailment segments s in mathcalS over all time periods t in mathcalT and all zones z in mathcalZ:\n\nbeginaligned\n\tObj_NSE =\n\tsum_s in mathcalS  sum_t in mathcalT sum_z in mathcalZomega_t times n_s^slope times Lambda_stz\nendaligned\n\nContributions to the power balance expression from non-served energy/curtailed demand from each demand segment s in mathcalS are also defined as:\n\nbeginaligned\n\tPowerBal_NSE =\n\tsum_s in mathcalS  Lambda_stz\n\t\thspace4 cm  forall s in mathcalS t in mathcalT\nendaligned\n\nBounds on curtailable demand\n\nDemand curtailed in each segment of curtailable demands s in mathcalS cannot exceed maximum allowable share of demand:\n\nbeginaligned\n\tLambda_stz leq (n_s^size times D_tz)\n\thspace4 cm  forall s in mathcalS t in mathcalT zin mathcalZ\nendaligned\n\nAdditionally, total demand curtailed in each time step cannot exceed total demand:\n\nbeginaligned\n\tsum_s in mathcalS  Lambda_stz leq D_tz\n\thspace4 cm  forall t in mathcalT zin mathcalZ\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"core/#h2_outputs","page":"Core","title":"h2_outputs","text":"","category":"section"},{"location":"core/","page":"Core","title":"Core","text":"DOLPHYN.h2_outputs(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_truck_all/#h2*truck*all","page":"Truck All","title":"h2truckall","text":"","category":"section"},{"location":"h2_truck_all/","page":"Truck All","title":"Truck All","text":"DOLPHYN.h2_truck_all(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_truck_all/#DOLPHYN.h2_truck_all-Tuple{Model, Dict, Dict}","page":"Truck All","title":"DOLPHYN.h2_truck_all","text":"h2_truck_all(EP::Model, inputs::Dict, setup::Dict)\n\nThis function defines a series of operationg variables,expresstions and constraints in truck scheduling and routing model.\n\nVariables\n\nThe sum of full and empty trucks should equal the total number of invested trucks.\n\nbeginaligned\n    v_j t^mathrmF+v_j t^mathrmE=V_j quad forall j in mathbbJ t in mathbbT\nendaligned    \n\nThe full (empty) trucks include full (empty) trucks in transit and staying at each zones.\n\nbeginaligned\n    v_j t^mathrmF=sum_z rightarrow z^prime in mathbbB u_z rightarrow z prime^prime t^mathrmF+sum_z in mathbbZ q_z j t^mathrmF \n    v_j t^mathrmE=sum_z rightarrow z^prime in mathbbB u_z rightarrow z^prime t^mathrmE+sum_z in mathbbZ q_z j t^mathrmE quad forall j in mathbbJ t in mathbbT\nendaligned    \n\nExpressions\n\nThe change of the total number of full (empty) available trucks at zone z should equal the number of charged (discharged) trucks minus the number of discharged (charged) trucks at zone z plus the number of full (empty) trucks that just arrived minus the number of full (empty) trucks that just departed:\n\nbeginaligned\n    q_z j t^mathrmF-q_z j t-1^mathrmF= q_z j t^mathrmCHA-q_z j t^mathrmDIS \n    +sum_z^prime in mathbbZleft(-x_z rightarrow z ^prime j t-1^mathrmF+y_z rightarrow z j t-1^mathrmFright) \n    q_z j t^mathrmE-q_z j t-1^mathrmE=-q_z j t^mathrmCHA+q_z j t^mathrmDIS \n    +sum_z^prime in mathbbZleft(-x_z rightarrow z^prime j t-1^mathrmE+y_z rightarrow z^prime j t-1^mathrmEright) \n    forall z in mathbbZ j in mathbbJ t in mathbbT\nendaligned\n\nThe change of the total number of full (empty) trucks in transit from zone z to zone zz should equal the number of full (empty) trucks that just departed from zone z minus the number of full (empty) trucks that just arrived at zone zz:\n\nbeginaligned\n    u_z rightarrow z ^prime j t^mathrmF-u_z rightarrow z ^prime j t-1^mathrmF  =x_z rightarrow z ^prime j t-1^mathrmF-y_z rightarrow z ^prime j t-1^mathrmF \n    u_z rightarrow z ^prime j t^mathrmE-u_z rightarrow z ^prime j t-1^mathrmE  =x_z rightarrow z^prime j t-1^mathrmE-y_z rightarrow z ^prime j t-1^mathrmE \n     forall z rightarrow z^prime in mathbbB j in mathbbJ t in mathbbT\nendaligned    \n\nThe amount of H2 delivered to zone z should equal the truck capacity times the number of discharged trucks minus the number of charged trucks, adjusted by theH2 boil-off loss during truck transportation and compression.\n\nbeginaligned\n    h_z j t^mathrmTRU=leftleft(1-sigma_jright) q_z j t^mathrmDIS-q_z j t^mathrmCHAright overlinemathrmE_j^mathrmTRU \n    forall z rightarrow z^prime in mathbbB j in mathbbJ t in mathbbT\nendaligned    \n\nThe minimum travelling time delay is modelled as follows.\n\nbeginaligned\n    u_z rightarrow z ^prime j t^mathrmF geq sum_e=t-Delta_z rightarrow z^prime+1^e=t x_z rightarrow z^prime j e^mathrmF \n    u_z rightarrow z^prime j t^mathrmE geq sum_e=t-Delta_z rightarrow z^prime+1^e=t x_z rightarrow z j e^mathrmE quad forall z rightarrow z^prime in mathbbB j in mathbbJ t in mathbbT\nendaligned\n\nbeginaligned\n    u_z rightarrow z^primej t^mathrmF geq sum_e=t+1^e=t+Delta_z rightarrow z^prime y_z rightarrow z^prime j e^mathrmF \n    u_z rightarrow z j t^mathrmE geq sum_e=t+1^e=t+Delta_z rightarrow z^prime y_z rightarrow z^prime j e^mathrmE \n    forall z rightarrow z^prime in mathbbB j in mathbbJ t in mathbbT\nendaligned   \n\nConstraints\n\nThe charging capability of truck stations is limited by their compression or liquefaction capacity.\n\nbeginaligned\n    q_z j t^mathrmCHA overlinemathrmE_j^mathrmTRU leq H_z j^mathrmTRU quad forall z in mathbbZ j in mathbbJ t in mathbbT\nendaligned    \n\n\n\n\n\n","category":"method"},{"location":"transmission/#h2_pipeline","page":"Transimission","title":"h2_pipeline","text":"","category":"section"},{"location":"transmission/","page":"Transimission","title":"Transimission","text":"DOLPHYN.h2_pipeline(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"transmission/#DOLPHYN.h2_pipeline-Tuple{Model, Dict, Dict}","page":"Transimission","title":"DOLPHYN.h2_pipeline","text":"h2_pipeline(EP::Model, inputs::Dict, setup::Dict)\n\nThis function includes the variables, expressions and objective funtion of pipeline.\n\nThis function expresses H2 change at zone z through pipeline i between two zones and can be split into H2 delivering and flowing out.\n\nbeginaligned\n    C_mathrmPIP^mathrmc=delta_i^mathrmPIP sum_z rightarrow z^prime in mathbbB sum_i in mathbbI mathrmc_i^mathrmPIP mathrmL_z rightarrow z^prime l_z rightarrow z^prime i\n    h_z rightarrow z^primei t^mathrmPIP=h_z rightarrow z^primei t^mathrmPIP+-h_z rightarrow z ^prime i t^mathrmPIP- quad forall z rightarrow z^prime in mathbbB i in mathbbI t in mathbbT\nendaligned    \n \n\n    The flow rate of H2 through pipeline type i is capped by the operational limits of the pipeline multiplied by the number of constructed pipeline i\n\nmath \\begin{aligned}     \\overline{\\mathrm{F}}{i} l{z \\rightarrow z,^{\\prime} i} \\geq h{z \\rightarrow z,{ }^{\\prime}, t}^{\\mathrm{PIP+}}, h{z \\rightarrow z,{ }^{\\prime} i, t}^{\\mathrm{PIP}} \\geq 0 \\quad \\forall z \\rightarrow z^{\\prime} \\in \\mathbb{B}, i \\in \\mathbb{I}, t \\in \\mathbb{T} \\end{aligned}    \n\n\n    The pipeline has storage capacity via line packing:\n\nmath \\begin{aligned}     \\overline{\\mathrm{E}}{i}^{\\mathrm{PIP}} l{z \\rightarrow z,^{\\prime} i} \\geq &-\\sum{\\tau=t{0}}^{t}\\left(h{z^{\\prime} \\rightarrow z, i, \\tau}^{\\mathrm{PIP}}+h{z \\rightarrow z,^{\\prime} i, \\tau}^{\\mathrm{PIP}}\\right) \\Delta t \\geq \\underline{\\mathrm{R}}{i}^{\\mathrm{PIP}} \\overline{\\mathrm{E}}{i}^{\\mathrm{PIP}} l_{z \\rightarrow z,^{\\prime} i} \\\n    & \\forall z^{\\prime} \\in \\mathbb{Z}, z \\in \\mathbb{Z}, i \\in \\mathbb{I}, t \\in \\mathbb{T} \\end{aligned}    ```\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*inputs","page":"DOLPHYN Inputs Functions","title":"loadh2inputs","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_inputs(setup::Dict,path::AbstractString)","category":"page"},{"location":"load_inputs/#load*co2*cap_hsc","page":"DOLPHYN Inputs Functions","title":"loadco2cap_hsc","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_co2_cap_hsc(setup::Dict, path::AbstractString, sep::AbstractString, inputs_co2::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_co2_cap_hsc-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_co2_cap_hsc","text":"load_co2_cap_hsc(setup::Dict, path::AbstractString, sep::AbstractString, inputs_co2_hsc::Dict)\n\nFunction for reading input parameters related to CO_2 emissions cap constraints\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*demand","page":"DOLPHYN Inputs Functions","title":"loadh2demand","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_demand(setup::Dict, path::AbstractString, sep::AbstractString, inputs_load::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_demand-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_demand","text":"load_h2_demand(setup::Dict, path::AbstractString, sep::AbstractString, inputs_load::Dict)\n\n<<<<<<< HEAD Function for reading input parameters related to CO_2 emissions cap constraints =======\n\ncb9e7bd3abdeb93868119116f42dcfff2b5a81bb\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*g2p_variability","page":"DOLPHYN Inputs Functions","title":"loadh2g2p_variability","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_g2p_variability(setup::Dict, path::AbstractString, sep::AbstractString, inputs_genvar::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_g2p_variability-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_g2p_variability","text":"load_h2_g2p_variability(setup::Dict, path::AbstractString, sep::AbstractString, inputs_genvar::Dict)\n\nFunction for reading input parameters related to hourly maximum capacity factors for all generators (plus storage and flexible demand resources)\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*g2p","page":"DOLPHYN Inputs Functions","title":"loadh2g2p","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_g2p(setup::Dict, path::AbstractString, sep::AbstractString, inputs_gen::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_g2p-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_g2p","text":"load_h2_g2p(setup::Dict, path::AbstractString, sep::AbstractString, inputs_gen::Dict)\n\n<<<<<<< HEAD Function for reading input parameters related to CO_2 emissions cap constraints =======\n\ncb9e7bd3abdeb93868119116f42dcfff2b5a81bb\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*gen","page":"DOLPHYN Inputs Functions","title":"loadh2gen","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_gen(setup::Dict, path::AbstractString, sep::AbstractString, inputs_gen::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_gen-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_gen","text":"load_h2_gen(setup::Dict, path::AbstractString, sep::AbstractString, inputs_gen::Dict)\n\n<<<<<<< HEAD Function for reading input parameters related to CO_2 emissions cap constraints =======\n\ncb9e7bd3abdeb93868119116f42dcfff2b5a81bb\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*generators_variability","page":"DOLPHYN Inputs Functions","title":"loadh2generators_variability","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_generators_variability(setup::Dict, path::AbstractString, sep::AbstractString, inputs_genvar::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_generators_variability-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_generators_variability","text":"load_h2_generators_variability(setup::Dict, path::AbstractString, sep::AbstractString, inputs_genvar::Dict)\n\nFunction for reading input parameters related to hourly maximum capacity factors for all generators (plus storage and flexible demand resources)\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*pipeline_data","page":"DOLPHYN Inputs Functions","title":"loadh2pipeline_data","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_pipeline_data(setup::Dict, path::AbstractString, sep::AbstractString, inputs_nw::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_pipeline_data-Tuple{Dict, AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_pipeline_data","text":"load_h2_pipeline_data(setup::Dict, path::AbstractString, sep::AbstractString, inputs_nw::Dict)\n\nFunction for reading input parameters related to the electricity transmission network\n\n\n\n\n\n","category":"method"},{"location":"load_inputs/#load*h2*truck","page":"DOLPHYN Inputs Functions","title":"loadh2truck","text":"","category":"section"},{"location":"load_inputs/","page":"DOLPHYN Inputs Functions","title":"DOLPHYN Inputs Functions","text":"DOLPHYN.load_h2_truck(path::AbstractString, sep::AbstractString, inputs_truck::Dict)","category":"page"},{"location":"load_inputs/#DOLPHYN.load_h2_truck-Tuple{AbstractString, AbstractString, Dict}","page":"DOLPHYN Inputs Functions","title":"DOLPHYN.load_h2_truck","text":"load_h2_truck(path::AbstractString, sep::AbstractString, inputs_truck::Dict)\n\n<<<<<<< HEAD Function for reading input parameters related to CO_2 emissions cap constraints =======\n\ncb9e7bd3abdeb93868119116f42dcfff2b5a81bb\n\n\n\n\n\n","category":"method"},{"location":"h2_truck/#h2_truck","page":"Truck","title":"h2_truck","text":"","category":"section"},{"location":"h2_truck/","page":"Truck","title":"Truck","text":"DOLPHYN.h2_truck(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_truck/#DOLPHYN.h2_truck-Tuple{Model, Dict, Dict}","page":"Truck","title":"DOLPHYN.h2_truck","text":"h2_truck(EP::Model, inputs::Dict, setup::Dict)\n\nThis function includes three parts of the Truck Model.The details can be found seperately in\"h2truckinvestment.jl\" \"h2longdurationtruck.jl\"and \"h2truck_all.jl\".\n\n\n\n\n\n","category":"method"},{"location":"h2_production_no_commit/#h2*production*no_commit","page":"Production No Commit","title":"h2productionno_commit","text":"","category":"section"},{"location":"h2_production_no_commit/","page":"Production No Commit","title":"Production No Commit","text":"DOLPHYN.h2_production_no_commit(EP::Model, inputs::Dict,setup::Dict)","category":"page"},{"location":"h2_storage_all/#h2*storage*all","page":"Storage ALL","title":"h2storageall","text":"","category":"section"},{"location":"h2_storage_all/","page":"Storage ALL","title":"Storage ALL","text":"DOLPHYN.h2_storage_all(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_storage_all/#DOLPHYN.h2_storage_all-Tuple{Model, Dict, Dict}","page":"Storage ALL","title":"DOLPHYN.h2_storage_all","text":"h2_storage_all(EP::Model, inputs::Dict, setup::Dict)\n\nSets up variables and constraints common to all storage resources. See ```storage()``` in ```storage.jl``` for description of constraints.\n\nStorage with symmetric charge and discharge capacity\n\nFor storage technologies with symmetric charge and discharge capacity (all o in mathcalO^sym), charge rate, Pi_ozt, is constrained by the total installed power capacity, Omega_oz. Since storage resources generally represent a `cluster' of multiple similar storage devices of the same type/cost in the same zone, GenX permits storage resources to simultaneously charge and discharge (as some units could be charging while others discharge), with the simultaenous sum of charge, Pi_ozt, and discharge, Theta_ozt, also limited by the total installed power capacity, Delta^total_oz. These two constraints are as follows:\n\nbeginaligned\n\t  Pi_ozt leq Delta^total_oz  quad forall o in mathcalO^sym z in mathcalZ t in mathcalT\n\t  Pi_ozt + Theta_ozt leq Delta^total_oz  quad forall o in mathcalO^sym z in mathcalZ t in mathcalT\nendaligned\n\nThese constraints are created with the function storage_symmetric() in storage_symmetric.jl.\n\nIf reserves are modeled, the following two constraints replace those above:\n\nbeginaligned\n  Pi_ozt + f^charge_ozt leq Delta^total_oz  quad forall o in mathcalO^sym z in mathcalZ t in mathcalT\n  Pi_ozt + f^charge_ozt + Theta_ozt + f^discharge_ozt + r^discharge_ozt leq Delta^total_oz  quad forall o in mathcalO^sym z in mathcalZ t in mathcalT \nendaligned\n\nwhere f^charge_ozt is the contribution of storage resources to frequency regulation while charging, f^discharge_ozt is the contribution of storage resources to frequency regulation while discharging, and r^discharge_ozt is the contribution of storage resources to upward reserves while discharging. Note that as storage resources can contribute to regulation and reserves while either charging or discharging, the proxy variables f^charge_ozt f^discharge_ozt and r^charge_ozt r^discharge_ozt are created for storage resources where the total contribution to regulation and reserves, f_ozt r_ozt is the sum of the proxy variables.\n\nThese constraints are created with the function storage_symmetric_reserves() in storage_symmetric.jl.\n\nStorage with asymmetric charge and discharge capacity\n\nFor storage technologies with asymmetric charge and discharge capacities (all o in mathcalO^asym), charge rate, Pi_ozt, is constrained by the total installed charge capacity, Delta^total charge_oz, as follows:\n\nbeginaligned\n\t  Pi_ozt leq Delta^total charge_oz  quad forall o in mathcalO^asym z in mathcalZ t in mathcalT\nendaligned\n\nThese constraints are created with the function storage_asymmetric() in storage_asymmetric.jl.\n\nIf reserves are modeled, the above constraint is replaced by the following:\n\nbeginaligned\n\t  Pi_ozt + f^charge_ozt leq Delta^total charge_oz  quad forall o in mathcalO^asym z in mathcalZ t in mathcalT\nendaligned\n\nwhere f^+_y=ozt is the contribution of storage resources to frequency regulation while charging.\n\nThese constraints are created with the function storage_asymmetric_reserves() in storage_asymmetric.jl.\n\nAll storage resources\n\nThe following constraints apply to all storage resources, o in mathcalO, regardless of whether the charge/discharge capacities are symmetric or asymmetric.\n\nThe following two constraints track the state of charge of the storage resources at the end of each time period, relating the volume of energy stored at the end of the time period, Gamma_ozt, to the state of charge at the end of the prior time period, Gamma_ozt-1, the charge and discharge decisions in the current time period, Pi_ozt Theta_ozt, and the self discharge rate for the storage resource (if any), eta_oz^loss.  The first of these two constraints enforces storage inventory balance for interior time steps (t in mathcalT^interior), while the second enforces storage balance constraint for the initial time step (t in mathcalT^start).\n\nbeginaligned\n\t  Gamma_ozt =Gamma_ozt-1 - frac1eta_oz^dischargeTheta_ozt + eta_oz^chargePi_ozt - eta_oz^lossGamma_ozt-1  quad forall o in mathcalO z in mathcalZ t in mathcalT^interior\n\t  Gamma_ozt =Gamma_ozt+tau^period-1 - frac1eta_oz^dischargeTheta_ozt + eta_oz^chargePi_ozt - eta_oz^lossGamma_ozt+tau^period-1  quad forall o in mathcalO z in mathcalZ t in mathcalT^start\nendaligned\n\nWhen modeling the entire year as a single chronological period with total number of time steps of tau^period, storage inventory in the first time step is linked to storage inventory at the last time step of the period representing the year. Alternatively, when modeling the entire year with multiple representative periods, this constraint relates storage inventory in the first timestep of the representative period with the inventory at the last time step of the representative period, where each representative period is made of tau^period time steps. In this implementation, energy exchange between representative periods is not permitted. When modeling representative time periods, GenX enables modeling of long duration energy storage which tracks state of charge between representative periods enable energy to be moved throughout the year. If LongDurationStorage=1 and OperationWrapping=1, this function calls long_duration_storage() in long_duration_storage.jl to enable this feature.\n\nThe next constraint limits the volume of energy stored at any time, Gamma_ozt, to be less than the installed energy storage capacity, Delta^total energy_oz. Finally, the maximum discharge rate for storage resources, Pi_ozt, is constrained to be less than the discharge power capacity, Omega_ozt or the state of charge at the end of the last period, Gamma_ozt-1, whichever is lessor.\n\nbeginaligned\n\t  Gamma_ozt leq Delta^total energy_oz  quad forall o in mathcalO z in mathcalZ t in mathcalT\n\t  Theta_ozt leq Delta^total_oz  quad forall o in mathcalO z in mathcalZ t in mathcalT\n\t  Theta_ozt leq Gamma_ozt-1  quad forall o in mathcalO z in mathcalZ t in mathcalT\nendaligned\n\nThe above constraints are established in storage_all() in storage_all.jl.\n\nIf reserves are modeled, two pairs of proxy variables f^charge_ozt f^discharge_ozt and r^charge_ozt r^discharge_ozt are created for storage resources, to denote the contribution of storage resources to regulation or reserves while charging or discharging, respectively. The total contribution to regulation and reserves, f_ozt r_ozt is then the sum of the proxy variables:\n\nbeginaligned\n\t  f_ozt = f^charge_ozt + f^dicharge_ozt  quad forall o in mathcalO z in mathcalZ t in mathcalT\n\t  r_ozt = r^charge_ozt + r^dicharge_ozt  quad forall o in mathcalO z in mathcalZ t in mathcalT\nendaligned\n\nThe total storage contribution to frequency regulation (f_ozt) and reserves (r_ozt) are each limited specified fraction of installed discharge power capacity (upsilon^reg_yz upsilon^rsv_yz), reflecting the maximum ramp rate for the storage resource in whatever time interval defines the requisite response time for the regulation or reserve products (e.g., 5 mins or 15 mins or 30 mins). These response times differ by system operator and reserve product, and so the user should define these parameters in a self-consistent way for whatever system context they are modeling.\n\nbeginaligned\n\tf_yzt leq upsilon^reg_yz times Delta^total_yz\n\thspace4 cm  forall y in mathcalW z in mathcalZ t in mathcalT \n\tr_yz t leq upsilon^rsv_yztimes Delta^total_yz\n\thspace4 cm  forall y in mathcalW z in mathcalZ t in mathcalT\nendaligned\n\nWhen charging, reducing the charge rate is contributing to upwards reserve and frequency regulation as it drops net demand. As such, the sum of the charge rate plus contribution to regulation and reserves up must be greater than zero. Additionally, the discharge rate plus the contribution to regulation must be greater than zero.\n\nbeginaligned\n\t  Pi_ozt - f^charge_ozt - r^charge_ozt geq 0  quad forall o in mathcalO z in mathcalZ t in mathcalT\n\t  Theta_ozt - f^discharge_ozt geq 0  quad forall o in mathcalO z in mathcalZ t in mathcalT\nendaligned\n\nAdditionally, when reserves are modeled, the maximum charge rate and contribution to regulation while charging can be no greater than the available energy storage capacity, or the difference between the total energy storage capacity, Delta^total energy_oz, and the state of charge at the end of the previous time period, Gamma_ozt-1. Note that for storage to contribute to reserves down while charging, the storage device must be capable of increasing the charge rate (which increase net load).\n\nbeginaligned\n\t  Pi_ozt + f^charge_ozt leq Delta^energy total_oz - Gamma_ozt-1  quad forall o in mathcalO z in mathcalZ t in mathcalT\nendaligned\n\nFinally, the constraints on maximum discharge rate are replaced by the following, to account for capacity contributed to regulation and reserves:\n\nbeginaligned\n\t  Theta_ozt + f^discharge_ozt + r^discharge_ozt leq Delta^total_oz  quad forall o in mathcalO z in mathcalZ t in mathcalT\n\t  Theta_ozt + f^discharge_ozt + r^discharge_ozt leq Gamma_ozt-1  quad forall o in mathcalO z in mathcalZ t in mathcalT\nendaligned\n\nThe above reserve related constraints are established by storage_all_reserves() in storage_all.jl\n\n\n\n\n\n","category":"method"},{"location":"h2_production_all/#h2*production*all","page":"Production All","title":"h2productionall","text":"","category":"section"},{"location":"h2_production_all/","page":"Production All","title":"Production All","text":"DOLPHYN.h2_production_all(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_production_all/#DOLPHYN.h2_production_all-Tuple{Model, Dict, Dict}","page":"Production All","title":"DOLPHYN.h2_production_all","text":"h2_production_all(EP::Model, inputs::Dict, setup::Dict)\n\nThe h2 generation module creates decision variables, expressions, and constraints related to hydrogen generation infrastructure\n\nThis module uses the following 'helper' functions in separate files: h2_generation_commit() for resources subject to unit commitment decisions and constraints (if any) and h2_generation_no_commit() for resources not subject to unit commitment (if any).\n\nInvestment and FOM cost expression, VOM cost expression, minimum and maximum capacity limits\n\nConstraints The outputs of each type of H2 generation facilities have to be kept within their lower and upper bounds. q\n\nbeginaligned\n\toverlinemathrmR_k z^mathrmGEN mathrmM_k z^mathrmGEN n_k z t geq h_k z t^mathrmGEN geq underlinemathrmR_k z^mathrmGEN mathbfM_k z^mathrmGEN n_k z t \n\tforall k in mathbbK z in mathbbZ t in mathbbT\nendaligned\n\nThe number of online units has to be less than the available number of generation units.\n\nbeginaligned\n\tn_k z t leq N_k z quad forall k in mathbbK z in mathbbZ t in mathbbT\nendaligned\n\nThere are limits on the period of time between when a unit starts up and when it can be shut-down again, and vice versa\n\nbeginaligned\n\tn_k z t geq sum_tau=t-tau_k z^mathrmUP^t n_k z t^mathrmUP quad forall k in mathbbK z in mathbbZ t in mathbbT\n\tN_k z-n_k z t geq sum_tau=t-tau_k z^mathrmDOWN^t n_k z t^mathrmDOWN quad forall k in mathbbK z in mathbbZ t in mathbbT\nendaligned\n\nExpressions The numbers of units starting up and shutting down are modeled as:\n\nbeginaligned\n\tn_k z t-n_k z t-1=n_k z t^mathrmUP-n_k z t^mathrmDOWN quad forall k in mathbbK z in mathbbZ t in mathbbT\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"g2p/#h2*g2p*all","page":"G2P","title":"h2g2pall","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p_all(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"g2p/#DOLPHYN.h2_g2p_all-Tuple{Model, Dict, Dict}","page":"G2P","title":"DOLPHYN.h2_g2p_all","text":"h2_g2p_all(EP::Model, inputs::Dict, setup::Dict)\n\nThe h2 generation module creates decision variables, expressions, and constraints related to hydrogen generation infrastructure\n\nInvestment and FOM cost expression, VOM cost expression, minimum and maximum capacity limits\n\n\n\n\n\n","category":"method"},{"location":"g2p/#h2*g2p*commit","page":"G2P","title":"h2g2pcommit","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p_commit(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"g2p/#h2*g2p*discharge","page":"G2P","title":"h2g2pdischarge","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p_discharge(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"g2p/#h2*g2p*investment","page":"G2P","title":"h2g2pinvestment","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p_investment(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"g2p/#DOLPHYN.h2_g2p_investment-Tuple{Model, Dict, Dict}","page":"G2P","title":"DOLPHYN.h2_g2p_investment","text":"h2_discharge(EP::Model, inputs::Dict, UCommit::Int, Reserves::Int)\n\nThis module defines the production decision variable  representing hydrogen injected into the network by resource y by at time period t.\n\nThis module additionally defines contributions to the objective function from variable costs of generation (variable O&M plus fuel cost) from all resources over all time periods.\n\n\n\n\n\n","category":"method"},{"location":"g2p/#h2*g2p*no_commit","page":"G2P","title":"h2g2pno_commit","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p_no_commit(EP::Model, inputs::Dict,setup::Dict)","category":"page"},{"location":"g2p/#h2_g2p","page":"G2P","title":"h2_g2p","text":"","category":"section"},{"location":"g2p/","page":"G2P","title":"G2P","text":"DOLPHYN.h2_g2p(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"g2p/#DOLPHYN.h2_g2p-Tuple{Model, Dict, Dict}","page":"G2P","title":"DOLPHYN.h2_g2p","text":"H2_G2Peration(EP::Model, inputs::Dict, UCommit::Int, Reserves::Int)\n\nThe h2_production module creates decision variables, expressions, and constraints related to various hydrogen generation technologies (electrolyzers, natural gas reforming etc.)\n\nThis module uses the following 'helper' functions in separate files: H2_G2Peration_commit() for resources subject to unit commitment decisions and constraints (if any) and H2_G2Peration_no_commit() for resources not subject to unit commitment (if any).\n\n\n\n\n\n","category":"method"},{"location":"h2_long_duration_storage/#h2*long*duration_storage","page":"Long Duration","title":"h2longduration_storage","text":"","category":"section"},{"location":"h2_long_duration_storage/","page":"Long Duration","title":"Long Duration","text":"DOLPHYN.h2_long_duration_storage(EP::Model, inputs::Dict)","category":"page"},{"location":"h2_long_duration_storage/#DOLPHYN.h2_long_duration_storage-Tuple{Model, Dict}","page":"Long Duration","title":"DOLPHYN.h2_long_duration_storage","text":"h2_long_duration_storage(EP::Model, inputs::Dict)\n\nThis function creates variables and constraints enabling modeling of long duration storage resources when modeling representative time periods.\n\nStorage inventory balance at beginning of each representative period\n\nThe constraints in this section are used to approximate the behavior of long-duration energy storage technologies when approximating annual grid operations by modeling operations over representative periods. Previously, the state of charge balance for storage (as defined in storage_all()) assumed that state of charge at the beginning and end of each representative period has to be the same. In other words, the amount of energy built up or consumed by storage technology o in zone z over the representative period m, Delta Q_ozm = 0. This assumption implicitly excludes the possibility of transferring energy from one representative period to the other which could be cost-optimal when the capital cost of energy storage capacity is relatively small. To model long-duration energy storage using representative periods, we replace the state of charge equation, such that the first term on the right hand side accounts for change in storage inventory associated with representative period m (Delta Q_ozm), which could be positive (net accumulation) or negative (net reduction).\n\nbeginaligned\n Gamma_oz(m-1)times tau^period+1  =left(1-eta_oz^lossright)times left(Gamma_ozmtimes tau^period -Delta Q_ozmright) -  \n frac1eta_oz^dischargeTheta_oz(m-1)times tau^period+1 + eta_oz^chargePi_oz(m-1)times tau^period+1 quad forall o in mathcalO^LDES z in mathcalZ m in mathcalM\nendaligned\n\nBy definition mathcalT^start=left(m-1right) times tau^period+1  m in mathcalM, which implies that this constraint is defined for all values of t in T^start.\n\nStorage inventory change input periods\n\nWe need additional variables and constraints to approximate energy exchange between representative periods, while accounting for their chronological occurence in the original input time series data and the possibility that two representative periods may not be adjacent to each other (see Figure below). To implement this, we introduce a new variable Q_oz n that models inventory of storage technology o in O in zone z in each input period n in mathcalN. Additionally we define a function mapping, f n rightarrow m, that uniquely maps each input period n to its corresponding representative period m. This mapping is available as an output of the process used to identify representative periods (E.g. k-means clustering Mallapragada et al., 2018).\n\n(Image: Modeling inter-period energy exchange via long-duration storage when using representative period temporal resolution to approximate annual grid operations) Figure. Modeling inter-period energy exchange via long-duration storage when using representative period temporal resolution to approximate annual grid operations\n\nThe following two equations define the storage inventory at the beginning of each input period n+1 as the sum of storage inventory at begining of previous input period n plus change in storage inventory for that period. The latter is approximated by the change in storage inventory in the corresponding representative period, identified per the mapping f(n).  The second constraint relates the storage level of the last input period, N, with the storage level at the beginning of the first input period. Finally, if the input period is also a representative period, then a third constraint enforces that initial storage level estimated by the intra-period storage balance constraint should equal the initial storage level estimated from the inter-period storage balance constraints. Note that N refers to the last modeled period.\n\nbeginaligned\n Q_ozn+1 = Q_ozn + Delta Q_ozf(n)\nquad forall  o in mathcalO^LDES z in mathcalZ n in mathcalNsetminusN\nendaligned\n\nbeginaligned\n Q_oz1 = Q_ozN + Delta Q_ozf(N)\nquad forall  o in mathcalO^LDES z in mathcalZ n = N\nendaligned\n\nbeginaligned\n Q_ozn =Gamma_ozf(n)times tau^period - Delta Q_ozm\nquad forall  o in mathcalO^LDES z in mathcalZ n in   mathcalN^rep\nendaligned\n\nFinally, the next constraint enforces that the initial storage level for each input period n must be less than the installed energy capacity limit. This constraint ensures that installed energy storage capacity is consistent with the state of charge during both the operational time periods t during each sample period m as well as at the start of each chronologically ordered input period n in the full annual time series.\n\nbeginaligned\n\tQ_ozn leq Delta^total energy_oz\nquad forall n in mathcalN o in mathcalO^LDES\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*HSC*outputs","page":"DOLPHYN Outputs Functions","title":"writeHSCoutputs","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_HSC_outputs(EP::Model, path::AbstractString, setup::Dict, inputs::Dict)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_HSC_outputs-Tuple{Model, AbstractString, Dict, Dict}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_HSC_outputs","text":"write_HSC_outputs(EP::Model, path::AbstractString, setup::Dict, inputs::Dict)\n\nFunction for the entry-point for writing the different output files. From here, onward several other functions are called, each for writing specific output files, like costs, capacities, etc.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*g2p*capacity","page":"DOLPHYN Outputs Functions","title":"writeg2pcapacity","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_g2p_capacity(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model))","category":"page"},{"location":"write_outputs/#write*h2*balance","page":"DOLPHYN Outputs Functions","title":"writeh2balance","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_balance(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_balance-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_balance","text":"write_h2_balance(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*capacity","page":"DOLPHYN Outputs Functions","title":"writeh2capacity","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_capacity(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_capacity-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_capacity","text":"write_h2_capacity(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the diferent capacities for the different generation technologies (starting capacities or, existing capacities, retired capacities, and new-built capacities).\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*charge","page":"DOLPHYN Outputs Functions","title":"writeh2charge","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_charge(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_charge-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_charge","text":"write_h2_charge(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the h2 storage charging energy values of the different storage technologies.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*costs","page":"DOLPHYN Outputs Functions","title":"writeh2costs","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_costs(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_costs-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_costs","text":"write_h2_costs(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the costs pertaining to the objective function (fixed, variable O&M etc.).\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*emissions","page":"DOLPHYN Outputs Functions","title":"writeh2emissions","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_emissions(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_emissions-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_emissions","text":"write_h2_emissions(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for reporting time-dependent CO_2 emissions by zone.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*g2p","page":"DOLPHYN Outputs Functions","title":"writeh2g2p","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_g2p-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_g2p","text":"write_h2_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the different values of power generated by the different technologies in operation.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*gen","page":"DOLPHYN Outputs Functions","title":"writeh2gen","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_gen(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_gen-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_gen","text":"write_h2_gen(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the different values of power generated by the different technologies in operation.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*nse","page":"DOLPHYN Outputs Functions","title":"writeh2nse","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_nse(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_nse-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_nse","text":"write_h2_nse(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for reporting non-served energy for every model zone, time step and cost-segment.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*pipeline_expansion","page":"DOLPHYN Outputs Functions","title":"writeh2pipeline_expansion","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_pipeline_expansion(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_pipeline_expansion-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_pipeline_expansion","text":"write_h2_pipeline_expansion(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*pipeline_flow","page":"DOLPHYN Outputs Functions","title":"writeh2pipeline_flow","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_pipeline_flow(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_pipeline_flow-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_pipeline_flow","text":"write_h2_pipeline_flow(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*storage","page":"DOLPHYN Outputs Functions","title":"writeh2storage","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_storage(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_storage-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_storage","text":"write_h2_storage(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)\n\nFunction for writing the capacities of different H2 storage technologies, including hydro reservoir, flexible storage tech etc.\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*truck_capacity","page":"DOLPHYN Outputs Functions","title":"writeh2truck_capacity","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_truck_capacity(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_truck_capacity-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_truck_capacity","text":"write_h2_truck_capacity(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*h2*truck_flow","page":"DOLPHYN Outputs Functions","title":"writeh2truck_flow","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_h2_truck_flow(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)\t","category":"page"},{"location":"write_outputs/#DOLPHYN.write_h2_truck_flow-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_h2_truck_flow","text":"write_h2_truck_flow(path::AbstractString, sep::AbstractString, inputs::Dict,setup::Dict, EP::Model)\n\n\n\n\n\n","category":"method"},{"location":"write_outputs/#write*p*g2p","page":"DOLPHYN Outputs Functions","title":"writepg2p","text":"","category":"section"},{"location":"write_outputs/","page":"DOLPHYN Outputs Functions","title":"DOLPHYN Outputs Functions","text":"DOLPHYN.write_p_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)","category":"page"},{"location":"write_outputs/#DOLPHYN.write_p_g2p-Tuple{AbstractString, AbstractString, Dict, Dict, Model}","page":"DOLPHYN Outputs Functions","title":"DOLPHYN.write_p_g2p","text":"write_p_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)\n\nFunction for writing the different values of power generated by the different technologies in operation.\n\n\n\n\n\n","category":"method"},{"location":"h2_flexible_demand/#h2*flexible*demand","page":"Flexible Demand","title":"h2flexibledemand","text":"","category":"section"},{"location":"h2_flexible_demand/","page":"Flexible Demand","title":"Flexible Demand","text":"DOLPHYN.h2_flexible_demand(EP::Model, inputs::Dict, setup::Dict)","category":"page"},{"location":"h2_flexible_demand/#DOLPHYN.h2_flexible_demand-Tuple{Model, Dict, Dict}","page":"Flexible Demand","title":"DOLPHYN.h2_flexible_demand","text":"h2_flexible_demand(EP::Model, inputs::Dict, setup::Dict)\n\nThis function defines the operating constraints for flexible demand resources. As implemented, flexible demand resources (y in mathcalDF) are characterized by: a) maximum deferrable demand as a fraction of available capacity in a particular time step t, rho^max_yzt, b) the maximum time this demand can be advanced and delayed, defined by parameters, tau^advance_yz and tau^delay_yz, respectively and c) the energy losses associated with shifting demand, eta_yz^dflex.\n\nTracking total deferred demand\n\nThe operational constraints governing flexible demand resources are as follows.\n\nThe first two constraints model keep track of inventory of deferred demand in each time step.  Specifically, the amount of deferred demand remaining to be served (Gamma_yzt) depends on the amount in the previous time step minus the served demand during time step t (Theta_yzt) while accounting for energy losses associated with demand flexibility, plus the demand that has been deferred during the current time step (Pi_yzt). Note that variable Gamma_yzt in mathbbR, forall y in mathcalDF t  in mathcalT. Similar to hydro inventory or storage state of charge constraints, for the first time step of the year (or each representative period), we define the deferred demand level based on level of deferred demand in the last time step of the year (or each representative period).\n\nbeginaligned\nGamma_yzt = Gamma_yzt-1 -eta_yz^dflexTheta_yzt +Pi_yzt hspace4 cm  forall y in mathcalDF z in mathcalZ t in mathcalT^interior \nGamma_yzt = Gamma_yzt +tau^period-1 -eta_yz^dflexTheta_yzt +Pi_yzt hspace4 cm  forall y in mathcalDF z in mathcalZ t in mathcalT^start\nendaligned\n\nBounds on available demand flexibility\n\nAt any given time step, the amount of demand that can be shifted or deferred cannot exceed the maximum deferrable demand, defined by product of the availability factor (rho^max_yt) times the available capacity(Delta^total_yz).\n\nbeginaligned\nPi_yt leq rho^max_yztDelta_yz hspace4 cm  forall y in mathcalDF z in mathcalZ t in mathcalT\nendaligned\n\nMaximum time delay and advancements\n\nDelayed demand must then be served within a fixed number of time steps. This is done by enforcing the sum of demand satisfied (Theta_yzt) in the following tau^delay_yz time steps (e.g., t + 1 to t + tau^delay_yz) to be greater than or equal to the level of energy deferred during time step t.\n\nbeginaligned\nsum_e=t+1^t+tau^delay_yzTheta_yze geq Gamma_yzt\n    hspace4 cm  forall y in mathcalDFz in mathcalZ t in mathcalT\nendaligned\n\nA similar constraints maximum time steps of demand advancement. This is done by enforcing the sum of demand deferred (Pi_yt) in the following tau^advance_y time steps (e.g., t + 1 to t + tau^advance_y) to be greater than or equal to the total level of energy deferred during time t (-Gamma_yt). The negative sign is included to account for the established sign convention that treat demand deferred in advance of the actual demand is defined to be negative.\n\nbeginaligned\nsum_e=t+1^t+tau^advance_yzPi_yze geq -Gamma_yzt\n    hspace4 cm  forall y in mathcalDF z in mathcalZ t in mathcalT\nendaligned\n\nIf t is first time step of the year (or the first time step of the representative period), then the above two constraints are implemented to look back over the last n time steps, starting with the last time step of the year (or the last time step of the representative period). This time-wrapping implementation is similar to the time-wrapping implementations used for defining the storage balance constraints for hydropower reservoir resources and energy storage resources.\n\n\n\n\n\n","category":"method"},{"location":"#DOLPHYN-Documentation","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"","category":"section"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"CurrentModule = DOLPHYN","category":"page"},{"location":"#Overview","page":"DOLPHYN Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"DOLPHYN is a highly-configurable, open source Julia package aimed to design and explore future energy system in corporation with new energy sytechnologies like electrolysis and caprbo capture.","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"The DOLPHYN model evaluates investments and operations across the bulk supply chain for electricity, H2 and CO2, including production, storage, transmission, conditioning (compression/liquefaction in the case of H2 as well as CO2) and demand. The model determines the least-cost mix of electricity and H2 production, storage, and transmission infrastructures to meet power and H2 demands subject to a variety of operational and policy constraints, considering carbon emissions at the same time. ","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"The developed model can incorporate a wide range of power and H2 technology options, including VRE generation, carbon capture and storage (CCS) applied to power and H2 generation, and truck (gaseous, liquid) and pipelines for H2 transportation. The power systems and H2 supply chain are coupled primarily through electrolysis and power generation technologies fueled by H2, as well as electricity consumption in H2 compression/liquefaction.  The key operational constraints of the model include: ","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"supply-demand balance for H2 and electricity at each zone;\ninventory balance constraints for stationary storage technologies;\ninventory balance constraints related to trucks at a given location (any of the zones and routes, arriving, departing or in transit) and for different states (empty and full), and\nlinearized unit commitment for conventional thermal power generation technologies and natural gas based H2 production technologies.","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"DOLPHYN features a modular and transparent code structure developed in Julia + JuMP. The model is designed to be highly flexible and configurable for use in a variety of applications from academic research and technology evaluation to public policy and regulatory analysis and resource planning. ","category":"page"},{"location":"#Requirements","page":"DOLPHYN Documentation","title":"Requirements","text":"","category":"section"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"DOLPHYN currently exists in version 0.2.0 and runs on Julia versions above 1.4 series, and a minimum version of JuMP v0.21.x. It is currently setup to use one of the following open-source freely available solvers: A) Clp for linear programming (LP) problems and (B) Cbc for mixed integer linear programming (MILP) problems. We also provide the option to use one of these two commercial solvers: C) Gurobi, and D) CPLEX. Note that using Gurobi and CPLEX requires a valid license on the host machine. ","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"The file julenv.jl in the parent directory lists all of the packages and their versions needed to run DOLPHYN. You can see all of the packages installed in your Julia environment and their version numbers by running pkg> status on the package manager command line in the Jula REPL.","category":"page"},{"location":"#Running-an-Instance-of-DOLPHYN","page":"DOLPHYN Documentation","title":"Running an Instance of DOLPHYN","text":"","category":"section"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"Download or clone the GenX repository on your machine in a directory named 'DOLPHYN-dev'. Create this new directory in a location where you wish to store the DOLPHYNJulEnv environment.","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"The Run.jl file in each of the example sub-folders within Example_Systems/ provides an example of how to use DOLPHYN.jl for capacity expansion modeling. The following are the main steps performed in the Run.jl script:","category":"page"},{"location":"","page":"DOLPHYN Documentation","title":"DOLPHYN Documentation","text":"Establish path to environment setup files and DOLPHYN source files.\nRead in model settings genx_settings.yml for electricity sector and other setting files for H2 and CO2 sectors from the example directory.\nConfigure solver settings.\nLoad the model inputs from the example directory and perform time-domain clustering if required.\nGenerate a DOLPHYN model instance.\nSolve the model.\nWrite the output files to a specified directory.","category":"page"}]
}
