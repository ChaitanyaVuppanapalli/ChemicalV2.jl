"""
GenX: An Configurable Capacity Expansion Model
Copyright (C) 2021,  Massachusetts Institute of Technology
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
A complete copy of the GNU General Public License v2 (GPLv2) is available
in LICENSE.txt.  Users uncompressing this from an archive may not have
received this license file.  If not, see <http://www.gnu.org/licenses/>.
"""

@doc raw"""
	write_power(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for writing the different values of power generated by the different technologies in operation.
"""
function write_synfuel_gen(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

	dfSynFuels = inputs["dfSynFuels"]
	H = inputs["SYN_FUELS_RES_ALL"]     # Number of resources (generators, storage, DR, and DERs)
	T = inputs["T"]     # Number of time steps (hours)

	# Power injected by each resource in each time step
	# dfSynFuelsGenOut_annual = DataFrame(Resource = inputs["H2_RESOURCES_NAME"], Zone = dfSynFuels [!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))
	dfSynFuelsGenOut = DataFrame(Resource = inputs["SYN_FUELS_RESOURCES_NAME"], Zone = dfSynFuels[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))

	for i in 1:H
		dfSynFuelsGenOut[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:vSFProd])[i,:]))
	end
	# Load hourly values
	dfSynFuelsGenOut = hcat(dfSynFuelsGenOut, DataFrame((value.(EP[:vSFProd])), :auto))

	# Add labels
	auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	rename!(dfSynFuelsGenOut,auxNew_Names)

	total = DataFrame(["Total" 0 sum(dfSynFuelsGenOut[!,:AnnualSum]) fill(0.0, (1,T))], :auto)

	for t in  1:T
		total[:,t+3] .= sum(dfSynFuelsGenOut[:,Symbol("t$t")][1:H])
	end

	rename!(total,auxNew_Names)
	dfSynFuelsGenOut = vcat(dfSynFuelsGenOut, total)

 	CSV.write(string(path,sep,"Synfuel_production.csv"), dftranspose(dfSynFuelsGenOut, false), writeheader=false)
	return dfSynFuelsGenOut


end
