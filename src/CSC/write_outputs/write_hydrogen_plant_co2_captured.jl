"""
CaptureX: An Configurable Capacity Expansion Model
Copyright (C) 2021,  Massachusetts Institute of Technology
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Captureeral Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Captureeral Public License for more details.
A complete copy of the GNU Captureeral Public License v2 (GPLv2) is available
in LICENSE.txt.  Users uncompressing this from an archive may not have
received this license file.  If not, see <http://www.gnu.org/licenses/>.
"""

@doc raw"""
	write_power(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for writing the different values of power generated by the different technologies in operation.
"""
function write_hydrogen_plant_co2_captured(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	dfH2Gen = inputs["dfH2Gen"]
	H = inputs["H2_RES_ALL"]
	T = inputs["T"]     # Number of time steps (hours)

	# Power injected by each resource in each time step
	# dfbiorefineryOut_annual = DataFrame(Resource = inputs["BIO_RESOURCES_NAME"], Zone = dfH2Gen[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))
	dfHydrogenCO2Captured = DataFrame(Resource = inputs["H2_RESOURCES_NAME"], Zone = dfH2Gen[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))

	for i in 1:H
		if setup["ParameterScale"]==1
			dfHydrogenCO2Captured[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:eHydrogen_CO2_captured_per_plant_per_time])[i,:]))*ModelScalingFactor
		else
			dfHydrogenCO2Captured[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:eHydrogen_CO2_captured_per_plant_per_time])[i,:]))
		end
	end

	# Load hourly values
	if setup["ParameterScale"]==1
		dfHydrogenCO2Captured = hcat(dfHydrogenCO2Captured, DataFrame((value.(EP[:eHydrogen_CO2_captured_per_plant_per_time]))*ModelScalingFactor, :auto))
	else
		dfHydrogenCO2Captured = hcat(dfHydrogenCO2Captured, DataFrame((value.(EP[:eHydrogen_CO2_captured_per_plant_per_time])), :auto))
	end

	# Add labels
	auxNew_Names=[Symbol("CO2 captured by resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	rename!(dfHydrogenCO2Captured,auxNew_Names)

	total = DataFrame(["Total" 0 sum(dfHydrogenCO2Captured[!,:AnnualSum]) fill(0.0, (1,T))], :auto)

	for t in  1:T
		total[:,t+3] .= sum(dfHydrogenCO2Captured[:,Symbol("t$t")][1:H])
	end

	rename!(total,auxNew_Names)
	dfHydrogenCO2Captured = vcat(dfHydrogenCO2Captured, total)

 	CSV.write(string(path,sep,"Hydrogen_plant_co2_captured.csv"), dftranspose(dfHydrogenCO2Captured, false), writeheader=false)
	return dfHydrogenCO2Captured


end
