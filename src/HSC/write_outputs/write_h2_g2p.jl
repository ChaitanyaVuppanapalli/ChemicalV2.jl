

@doc raw"""
	write_h2_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for reporting the different values of power generated by hydrogen to power plants in operation.
"""
function write_h2_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	dfH2G2P = inputs["dfH2G2P"]::DataFrame
	H = inputs["H2_G2P_ALL"]::Int     # Number of resources (generators, storage, DR, and DERs)
	T = inputs["T"]::Int     # Number of time steps (hours)

	# Power injected by each resource in each time step
	# dfH2G2POut_annual = DataFrame(Resource = inputs["H2_RESOURCES_NAME"], Zone = dfH2G2P[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))
	dfH2G2POut = DataFrame(Resource = inputs["H2_G2P_NAME"], Zone = dfH2G2P[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))

	for i in 1:H
		dfH2G2POut[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:vH2G2P])[i,:]))
	end
	# Load hourly values
	dfH2G2POut = hcat(dfH2G2POut, DataFrame((value.(EP[:vH2G2P])), :auto), copycols = false)

	# Add labels
	auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	rename!(dfH2G2POut,auxNew_Names)

	total = DataFrame(["Total" 0 sum(dfH2G2POut[!,:AnnualSum]) fill(0.0, (1,T))], :auto)

 	CSV.write(string(path,sep,"HSC_G2P_H2_Consumption.csv"), dftranspose(dfH2G2POut, false), writeheader=false)
	return dfH2G2POut


end