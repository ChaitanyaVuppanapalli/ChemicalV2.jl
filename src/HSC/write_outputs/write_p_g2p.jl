

@doc raw"""
	write_p_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)

Function for reporting the different values of power generated by hydrogen to power plants.
"""
function write_p_g2p(path::AbstractString, sep::AbstractString, inputs::Dict, setup::Dict, EP::Model)
	dfH2G2P = inputs["dfH2G2P"]::DataFrame
	H = inputs["H2_G2P_ALL"]::Int     # Number of resources (generators, storage, DR, and DERs)
	T = inputs["T"]::Int     # Number of time steps (hours)

	# Power injected by each resource in each time step
	# dfH2G2POut_annual = DataFrame(Resource = inputs["H2_RESOURCES_NAME"], Zone = dfH2G2P[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))
	dfPG2POut = DataFrame(Resource = inputs["H2_G2P_NAME"], Zone = dfH2G2P[!,:Zone], AnnualSum = Array{Union{Missing,Float32}}(undef, H))

	for i in 1:H
		dfPG2POut[!,:AnnualSum][i] = sum(inputs["omega"].* (value.(EP[:vPG2P])[i,:]))
	end
	# Load hourly values
	dfPG2POut = hcat(dfPG2POut, DataFrame((value.(EP[:vPG2P])), :auto))

	# Add labels
	auxNew_Names=[Symbol("Resource");Symbol("Zone");Symbol("AnnualSum");[Symbol("t$t") for t in 1:T]]
	rename!(dfPG2POut,auxNew_Names)

	total = DataFrame(["Total" 0 sum(dfPG2POut[!,:AnnualSum]) fill(0.0, (1,T))], :auto)

	for t in  1:T
		total[:,t+3] .= sum(dfPG2POut[:,Symbol("t$t")][1:H])
	end

	rename!(total,auxNew_Names)
	dfPower_H2G2P = vcat(dfPG2POut, total)

 	CSV.write(string(path,sep,"HSC_G2P_power_generation.csv"), dftranspose(dfPower_H2G2P, false), writeheader=false)
	
	return dfPG2POut
end